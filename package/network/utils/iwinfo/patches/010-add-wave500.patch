--- a/hardware.txt
+++ b/hardware.txt
@@ -58,3 +58,4 @@
 0x1814 0x3052 0x1814 0x0008    0      0  "RaLink"   "Rt3052"
 0x1814 0x3352 0x1814 0x000c    0      0  "RaLink"   "Rt3352"
 0x11ab 0x2a55 0x11ab 0x0000    0      0  "Marvell"  "88W8864"
+0x1bef 0x0810 0x1bef 0x0810    0      0  "Lantiq"  "Wave5xx"
--- a/iwinfo_wext.c
+++ b/iwinfo_wext.c
@@ -510,24 +510,49 @@
 	return (id->vendor_id > 0 && id->device_id > 0) ? 0 : -1;
 }
 
+static const struct iwinfo_hardware_entry *
+wext_get_hardware_entry(const char *ifname)
+{
+	struct iwinfo_hardware_id id;
+
+	if (wext_get_hardware_id(ifname, (char *)&id))
+		return NULL;
+
+	return iwinfo_hardware(&id);
+}
+
 static int wext_get_hardware_name(const char *ifname, char *buf)
 {
-	sprintf(buf, "Generic WEXT");
+	const struct iwinfo_hardware_entry *hw;
+
+	if (!(hw = wext_get_hardware_entry(ifname)))
+		sprintf(buf, "Generic Wext");
+	else
+		sprintf(buf, "%s %s", hw->vendor_name, hw->device_name);
+
 	return 0;
 }
 
 static int wext_get_txpower_offset(const char *ifname, int *buf)
 {
-	/* Stub */
-	*buf = 0;
-	return -1;
+	const struct iwinfo_hardware_entry *hw;
+
+	if (!(hw = wext_get_hardware_entry(ifname)))
+		return -1;
+
+	*buf = hw->txpower_offset;
+	return 0;
 }
 
 static int wext_get_frequency_offset(const char *ifname, int *buf)
 {
-	/* Stub */
-	*buf = 0;
-	return -1;
+	const struct iwinfo_hardware_entry *hw;
+
+	if (!(hw = wext_get_hardware_entry(ifname)))
+		return -1;
+
+	*buf = hw->frequency_offset;
+	return 0;
 }
 
 const struct iwinfo_ops wext_ops = {
--- a/iwinfo_nl80211.c
+++ b/iwinfo_nl80211.c
@@ -1137,6 +1137,7 @@
 
 static int nl80211_get_frequency(const char *ifname, int *buf)
 {
+#if 0
 	char *res, channel[4], hwmode[2];
 	struct nl80211_msg_conveyor *req;
 
@@ -1173,17 +1174,19 @@
 	}
 
 	return (*buf == 0) ? -1 : 0;
+#endif
+	return wext_ops.frequency(ifname, buf);
 }
 
 static int nl80211_get_channel(const char *ifname, int *buf)
 {
-	if (!nl80211_get_frequency(ifname, buf))
+/*	if (!nl80211_get_frequency(ifname, buf))
 	{
 		*buf = nl80211_freq2channel(*buf);
 		return 0;
 	}
-
-	return -1;
+*/
+	return wext_ops.channel(ifname, buf);
 }
 
 
@@ -1305,7 +1308,7 @@
 
 	if (rr.rate)
 	{
-		*buf = (rr.rate * 100);
+		*buf = (rr.rate * 1000);
 		return 0;
 	}
 
@@ -1357,7 +1360,7 @@
 
 static int nl80211_get_noise(const char *ifname, int *buf)
 {
-	int8_t noise;
+/*	int8_t noise;
 	struct nl80211_msg_conveyor *req;
 
 	req = nl80211_msg(ifname, NL80211_CMD_GET_SURVEY, NLM_F_DUMP);
@@ -1376,6 +1379,8 @@
 	}
 
 	return -1;
+*/
+	return wext_ops.noise(ifname, buf);
 }
 
 static int nl80211_get_quality(const char *ifname, int *buf)
@@ -1667,7 +1671,7 @@
 		{
 			if (rinfo[NL80211_RATE_INFO_BITRATE])
 				e->rx_rate.rate =
-					nla_get_u16(rinfo[NL80211_RATE_INFO_BITRATE]) * 100;
+					nla_get_u16(rinfo[NL80211_RATE_INFO_BITRATE]) * 1000;
 
 			if (rinfo[NL80211_RATE_INFO_MCS])
 				e->rx_rate.mcs = nla_get_u8(rinfo[NL80211_RATE_INFO_MCS]);
@@ -1685,7 +1689,7 @@
 		{
 			if (rinfo[NL80211_RATE_INFO_BITRATE])
 				e->tx_rate.rate =
-					nla_get_u16(rinfo[NL80211_RATE_INFO_BITRATE]) * 100;
+					nla_get_u16(rinfo[NL80211_RATE_INFO_BITRATE]) * 1000;
 
 			if (rinfo[NL80211_RATE_INFO_MCS])
 				e->tx_rate.mcs = nla_get_u8(rinfo[NL80211_RATE_INFO_MCS]);
