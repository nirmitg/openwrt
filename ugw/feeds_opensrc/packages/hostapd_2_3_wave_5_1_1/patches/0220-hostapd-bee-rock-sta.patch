--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -2526,7 +2526,8 @@ static int wpa_supplicant_ctrl_iface_sca
 	pos = buf;
 	end = buf + buflen;
 
-	ret = os_snprintf(pos, end - pos, MACSTR "\t%d\t%d\t",
+	ret = os_snprintf(pos, end - pos, "bssid=" MACSTR " frequency=%d"
+	  " signal_level=%d flags=",
 			  MAC2STR(bss->bssid), bss->freq, bss->level);
 	if (os_snprintf_error(end - pos, ret))
 		return -1;
@@ -2617,7 +2618,7 @@ static int wpa_supplicant_ctrl_iface_sca
 	}
 #endif /* CONFIG_FST */
 
-	ret = os_snprintf(pos, end - pos, "\t%s",
+	ret = os_snprintf(pos, end - pos, " ssid=%s",
 			  wpa_ssid_txt(bss->ssid, bss->ssid_len));
 	if (os_snprintf_error(end - pos, ret))
 		return -1;
@@ -2641,12 +2642,6 @@ static int wpa_supplicant_ctrl_iface_sca
 
 	pos = buf;
 	end = buf + buflen;
-	ret = os_snprintf(pos, end - pos, "bssid / frequency / signal level / "
-			  "flags / ssid\n");
-	if (os_snprintf_error(end - pos, ret))
-		return pos - buf;
-	pos += ret;
-
 	dl_list_for_each(bss, &wpa_s->bss_id, struct wpa_bss, list_id) {
 		ret = wpa_supplicant_ctrl_iface_scan_result(wpa_s, bss, pos,
 							    end - pos);
@@ -7106,6 +7101,240 @@ static int wpa_supplicant_vendor_cmd(str
 }
 
 
+static int wpas_ctrl_iface_get_radio_info(
+  struct wpa_supplicant *wpa_s, char *cmd, char *buf, size_t buflen)
+{
+  int ret;
+  mtlk_radio_info_t radio_info;
+  char *pos, *end;
+  enum wpa_states state = wpa_s->wpa_state;
+
+  pos = buf;
+  end = buf + buflen;
+
+  ret = wpa_drv_get_radio_info(wpa_s, &radio_info);
+  if (ret)
+    return -1;
+
+  ret = os_snprintf(pos, end - pos, "Name=%s\n", wpa_s->ifname);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "WpaSupplicantEnabled=%d\n",
+    state <= WPA_INTERFACE_DISABLED ? 0 : 1);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "TxEnabled=%d\n", radio_info.hw.Enable);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "Channel=%d\n", radio_info.hw.Channel);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "BytesSent=%d\n",
+    radio_info.hw_stats.traffic_stats.BytesSent);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "BytesReceived=%d\n",
+    radio_info.hw_stats.traffic_stats.BytesReceived);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "PacketsSent=%d\n",
+    radio_info.hw_stats.traffic_stats.PacketsSent);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "PacketsReceived=%d\n",
+    radio_info.hw_stats.traffic_stats.PacketsReceived);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "ErrorsSent=%d\n",
+    radio_info.hw_stats.error_stats.ErrorsSent);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "ErrorsReceived=%d\n",
+    radio_info.hw_stats.error_stats.ErrorsReceived);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "DiscardPacketsSent=%d\n",
+    radio_info.hw_stats.error_stats.DiscardPacketsSent);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "DiscardPacketsReceived=%d\n",
+    radio_info.hw_stats.error_stats.DiscardPacketsReceived);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "PLCPErrorCount=UNKNOWN\n");
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "FCSErrorCount=%d\n",
+    radio_info.hw_stats.FCSErrorCount);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "InvalidMACCount=UNKNOWN\n");
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "PacketsOtherReceived=UNKNOWN\n");
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "Noise=%d\n",
+    radio_info.hw_stats.Noise);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "BSS load=%d\n", radio_info.load);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "TxPower=%.2f\n",
+    radio_info.tx_pwr_cfg / 100.);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "RxAntennas=%d\n",
+    radio_info.num_rx_antennas);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  ret = os_snprintf(pos, end - pos, "TxAntennas=%d\n",
+    radio_info.num_tx_antennas);
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  if (!radio_info.primary_center_freq) {
+    ret = os_snprintf(pos, end - pos, "Freq=UNKNOWN\n");
+    if (os_snprintf_error(end - pos, ret))
+      return -1;
+    pos += ret;
+
+    ret = os_snprintf(pos, end - pos, "OperatingChannelBandwidt=UNKNOWN\n");
+    if (os_snprintf_error(end - pos, ret))
+      return -1;
+    pos += ret;
+
+    ret = os_snprintf(pos, end - pos, "Cf1=UNKNOWN\n");
+    if (os_snprintf_error(end - pos, ret))
+      return -1;
+    pos += ret;
+
+    ret = os_snprintf(pos, end - pos, "Dfs_chan=UNKNOWN\n");
+    if (os_snprintf_error(end - pos, ret))
+      return -1;
+    pos += ret;
+  } else {
+    ret = os_snprintf(pos, end - pos, "Freq=%d\n",
+      radio_info.primary_center_freq);
+    if (os_snprintf_error(end - pos, ret))
+      return -1;
+    pos += ret;
+
+    ret = os_snprintf(pos, end - pos, "OperatingChannelBandwidt=%d\n",
+      radio_info.width);
+    if (os_snprintf_error(end - pos, ret))
+      return -1;
+    pos += ret;
+
+    ret = os_snprintf(pos, end - pos, "Cf1=%d\n",
+      radio_info.center_freq1);
+    if (os_snprintf_error(end - pos, ret))
+      return -1;
+    pos += ret;
+
+    ret = os_snprintf(pos, end - pos, "Dfs_chan=%d\n",
+      ieee80211_is_dfs(radio_info.primary_center_freq));
+    if (os_snprintf_error(end - pos, ret))
+      return -1;
+    pos += ret;
+  }
+
+  return pos - buf;
+}
+
+
+static int wpa_supplicant_ctrl_iface_set_data_routing_mode(struct wpa_supplicant *wpa_s,
+             char *cmd)
+{
+  char *pos;
+  int four_addr_mode = 0;
+
+  /* cmd: mode=<3_ADDRESS_MODE/4_ADDRESS_MODE> */
+  pos = os_strstr(cmd, "mode=");
+  if (pos == NULL) {
+    wpa_printf(MSG_ERROR,
+      "CTRL_IFACE: usage  mode=<3_ADDRESS_MODE/4_ADDRESS_MODE>");
+    return -1;
+  }
+  pos += strlen("mode=");
+  if (os_strstr(pos, "3_ADDRESS_MODE"))
+    four_addr_mode = 0;
+  else {
+    if (os_strstr(pos, "4_ADDRESS_MODE"))
+      four_addr_mode = 1;
+    else {
+      wpa_printf(MSG_ERROR,
+        "CTRL_IFACE: invalid data routing mode specified [%s]", pos);
+      return -1;
+    }
+  }
+  wpa_printf(MSG_DEBUG, "CTRL_IFACE: %s address mode", four_addr_mode ? "4" : "3");
+
+  wpa_s->conf->wds = four_addr_mode;
+  return 0;
+}
+
+
+static int wpa_supplicant_ctrl_iface_get_data_routing_mode(
+  struct wpa_supplicant *wpa_s, char *cmd, char *buf, size_t buflen)
+{
+  int ret;
+  char *pos, *end;
+
+  pos = buf;
+  end = buf + buflen;
+
+  ret = os_snprintf(pos, end - pos, "mode=%s_ADDRESS_MODE\n",
+    wpa_s->conf->wds ? "4" : "3");
+  if (os_snprintf_error(end - pos, ret))
+    return -1;
+  pos += ret;
+
+  return pos - buf;
+}
+
 static void wpa_supplicant_ctrl_iface_flush(struct wpa_supplicant *wpa_s)
 {
 #ifdef CONFIG_P2P
@@ -9354,6 +9583,16 @@ char * wpa_supplicant_ctrl_iface_process
 	} else if (os_strncmp(buf, "GET_PREF_FREQ_LIST ", 19) == 0) {
 		reply_len = wpas_ctrl_iface_get_pref_freq_list(
 			wpa_s, buf + 19, reply, reply_size);
+  } else if (os_strncmp(buf, "GET_RADIO_INFO", 14) == 0) {
+    printf("%s; *** Received from FAPI: 'GET_RADIO_INFO' (buf= '%s') ***\n", __FUNCTION__, buf);
+    reply_len = wpas_ctrl_iface_get_radio_info(wpa_s, NULL, reply,
+          reply_size);
+  } else if (os_strncmp(buf, "DATA_ROUTING_MODE_SET ", 22) == 0) {
+    if (wpa_supplicant_ctrl_iface_set_data_routing_mode(wpa_s, buf + 22))
+      reply_len = -1;
+  } else if (os_strncmp(buf, "DATA_ROUTING_MODE_GET", 21) == 0) {
+    reply_len = wpa_supplicant_ctrl_iface_get_data_routing_mode(wpa_s, NULL, reply,
+          reply_size);
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
 		reply_len = 16;
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -796,11 +796,17 @@ void wpa_supplicant_set_state(struct wpa
 	if (state == WPA_COMPLETED && wpa_s->new_connection) {
 		struct wpa_ssid *ssid = wpa_s->current_ssid;
 #if defined(CONFIG_CTRL_IFACE) || !defined(CONFIG_NO_STDOUT_DEBUG)
-		wpa_msg(wpa_s, MSG_INFO, WPA_EVENT_CONNECTED "- Connection to "
-			MACSTR " completed [id=%d id_str=%s]",
-			MAC2STR(wpa_s->bssid),
-			ssid ? ssid->id : -1,
-			ssid && ssid->id_str ? ssid->id_str : "");
+		if (ssid && ssid->id_str)
+      wpa_msg(wpa_s, MSG_INFO, WPA_EVENT_CONNECTED
+        MACSTR " id=%d id_str=%s",
+        MAC2STR(wpa_s->bssid),
+        ssid ? ssid->id : -1,
+        ssid->id_str);
+		else
+      wpa_msg(wpa_s, MSG_INFO, WPA_EVENT_CONNECTED
+        MACSTR " id=%d",
+        MAC2STR(wpa_s->bssid),
+        ssid ? ssid->id : -1);
 #endif /* CONFIG_CTRL_IFACE || !CONFIG_NO_STDOUT_DEBUG */
 		wpas_clear_temp_disabled(wpa_s, ssid, 1);
 		wpa_blacklist_clear(wpa_s);
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -4104,6 +4104,13 @@ struct wpa_driver_ops {
 
 };
 
+/**
+ * get_radio_info - Get radio info
+ * @priv: Private driver interface data
+ * @radio_info: Pointer to radio_info structure (filled by the function)
+ * Returns: 0 on success, -1 on failure
+ */
+int (*get_radio_info)(void *priv, mtlk_radio_info_t *radio_info);
 
 /**
  * enum wpa_event_type - Event type for wpa_supplicant_event() calls
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -976,4 +976,12 @@ static inline int wpa_drv_set_default_sc
 	return wpa_s->driver->set_default_scan_ies(wpa_s->drv_priv, ies, len);
 }
 
+static inline int wpa_drv_get_radio_info(struct wpa_supplicant *wpa_s,
+               mtlk_radio_info_t *radio_info)
+{
+  if (!wpa_s->driver->get_radio_info)
+    return -1;
+  return wpa_s->driver->get_radio_info(wpa_s->drv_priv, radio_info);
+}
+
 #endif /* DRIVER_I_H */
--- a/wpa_supplicant/wpa_cli.c
+++ b/wpa_supplicant/wpa_cli.c
@@ -2725,6 +2725,23 @@ static int wpa_cli_cmd_p2p_lo_stop(struc
 	return wpa_cli_cmd(ctrl, "P2P_LO_STOP", 0, argc, argv);
 }
 
+static int wpa_cli_cmd_radio_info(struct wpa_ctrl *ctrl, int argc,
+           char *argv[])
+{
+  return wpa_cli_cmd(ctrl, "GET_RADIO_INFO", 0, argc, argv);
+}
+
+static int wpa_cli_cmd_data_routing_mode_set(struct wpa_ctrl *ctrl, int argc,
+           char *argv[])
+{
+  return wpa_cli_cmd(ctrl, "DATA_ROUTING_MODE_SET", 1, argc, argv);
+}
+
+static int wpa_cli_cmd_data_routing_mode_get(struct wpa_ctrl *ctrl, int argc,
+           char *argv[])
+{
+  return wpa_cli_cmd(ctrl, "DATA_ROUTING_MODE_GET", 0, argc, argv);
+}
 
 enum wpa_cli_cmd_flags {
 	cli_cmd_flag_none		= 0x00,
@@ -3320,6 +3337,16 @@ static const struct wpa_cli_cmd wpa_cli_
 	{ "p2p_lo_stop", wpa_cli_cmd_p2p_lo_stop, NULL,
 	  cli_cmd_flag_none,
 	  "= stop P2P listen offload" },
+	{ "radio_info", wpa_cli_cmd_radio_info, NULL,
+	  cli_cmd_flag_none,
+	  "= get radio info" },
+	{ "data_routing_mode_set", wpa_cli_cmd_data_routing_mode_set, NULL,
+	  cli_cmd_flag_none,
+	  "mode=<3_ADDRESS_MODE/4_ADDRESS_MODE> "
+	  "= set data routing mode" },
+	{ "data_routing_mode_get", wpa_cli_cmd_data_routing_mode_get, NULL,
+	  cli_cmd_flag_none,
+	  "= get data routing mode" },
 	{ NULL, NULL, NULL, cli_cmd_flag_none, NULL }
 };
 
