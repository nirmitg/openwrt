# HG changeset patch
# Parent b5166aeff636405a1a32cee0995942c17b97b055

diff --git a/net/ipv4/esp4.c b/net/ipv4/esp4.c
--- a/net/ipv4/esp4.c
+++ b/net/ipv4/esp4.c
@@ -17,12 +17,15 @@
 #include <net/icmp.h>
 #include <net/protocol.h>
 #include <net/udp.h>
+#include <crypto/ltq_ipsec_ins.h>
 
 struct esp_skb_cb {
 	struct xfrm_skb_cb xfrm;
 	void *tmp;
 };
 
+int32_t first_p=0;
+struct sk_buff *skb_test = NULL;
 #define ESP_SKB_CB(__skb) ((struct esp_skb_cb *)&((__skb)->cb[0]))
 
 static u32 esp4_get_mtu(struct xfrm_state *x, int mtu);
@@ -105,14 +108,160 @@ static inline struct scatterlist *esp_gi
 			     __alignof__(struct scatterlist));
 }
 
+
+
 static void esp_output_done(struct crypto_async_request *base, int err)
 {
 	struct sk_buff *skb = base->data;
 
 	kfree(ESP_SKB_CB(skb)->tmp);
+	
 	xfrm_output_resume(skb, err);
 }
 
+#ifdef CONFIG_LTQ_PPA_MPE_IP97
+static void dump_skb_data(u32 len, char *pData){
+	int i;
+	for(i=0;i<len;i++){
+		printk("%2.2x ",(u8)(pData[i]));
+		if (i % 16 == 15)
+			printk("\n");
+	}
+	printk("\n");
+}
+
+void dump_skb(struct sk_buff *skb)
+{
+	int elt;
+	struct sk_buff *skb1, **skb_p;
+
+	printk("============= \n");
+	printk("<%s> skb:%x\n",__FUNCTION__,skb);
+	printk("<%s> skb->data_len:%d  headlen:%d skb->len:%d \n",
+		__FUNCTION__, skb->data_len, skb->hdr_len, skb->len);
+
+	printk("<%s> nr_frags:%d\n",__FUNCTION__, skb_shinfo(skb)->nr_frags);
+	printk("<%s> Head:%x tail:%x end:%x \n",__FUNCTION__, skb->head, skb->tail, skb->end);
+	printk("<%s> Headroom:%d tailroom:%d \n",__FUNCTION__, skb_headroom(skb), skb_tailroom(skb));
+	printk("<%s> Data pointer:%x network_header:%x transport_header:%x\n",__FUNCTION__, skb->data, skb_network_header(skb),skb_transport_header(skb));
+	printk("<%s> network_offset:%x transport_offset:%x\n",__FUNCTION__,skb_network_offset(skb),skb_transport_offset(skb));
+
+	elt = 1;
+	skb_p = &skb_shinfo(skb)->frag_list;
+	while ((skb1 = *skb_p) != NULL) {
+
+		printk("<%s> ++++ Frags:[%d] +++++\n",__FUNCTION__, elt);
+		printk("<%s> skb1->data_len:%d  headlen:%d  skb1->len:%d \n",
+			__FUNCTION__, skb1->data_len, skb1->hdr_len, skb1->len);
+		printk("<%s> Head:%x tail:%x \n",__FUNCTION__, skb1->head, skb1->tail);
+		printk("<%s> Data pointer:%x network_header:%x transport_header:%x\n",__FUNCTION__,skb1->data, skb_network_header(skb1),skb_transport_header(skb1));
+		printk("<%s> network_offset:%x transport_offset:%x\n",__FUNCTION__,skb_network_offset(skb1),skb_transport_offset(skb1));
+		elt++;
+		skb_p = &skb1->next;
+
+	}
+
+	printk("<%s> Number of Frags: %d\n",__FUNCTION__, elt);
+	printk("============= \n");
+}
+static void esp_output_done_fastpath(struct ltq_ipsec_complete *enc_done)
+{
+	struct sk_buff *skb_done = (struct sk_buff *)(enc_done->data);
+	//printk("<%s> skb->len:[%d] enc_done->ret_pkt_len:[%d] enc_done->err:[%d]\n",__FUNCTION__,skb_done->len, enc_done->ret_pkt_len, enc_done->err);
+	skb_done->data = skb_transport_header(skb_done);
+	skb_done->len = enc_done->ret_pkt_len;
+	skb_done->tail = skb_done->data + skb_done->len;
+	/*if(skb_test == skb_done) {
+		printk("<%s>For first packet reply from engine %x \n",__FUNCTION__,skb_test);
+		dump_skb(skb_done);
+		//dump_skb_data(skb_done->len, skb_done->data);
+	}*/
+	//skb_put(skb_done, (enc_done->ret_pkt_len - skb_done->len ));
+	skb_push(skb_done, -skb_network_offset(skb_done));
+	//skb_done->tail = skb_done->data + skb_done->len;
+	*skb_mac_header(skb_done) = IPPROTO_ESP;
+	/*if(skb_test == skb_done) {
+		printk("<%s>For first packet reply from engine after push %x \n",__FUNCTION__,skb_test);
+		dump_skb(skb_done);
+		dump_skb_data(100, skb_done->data);
+	}*/
+	xfrm_output_resume(skb_done, enc_done->err);
+}
+
+static int esp_output(struct xfrm_state *x, struct sk_buff *skb)
+{
+	int32_t err;
+	int32_t trailer_len; 
+	uint32_t iv_len, icv_len, blk_size;
+	struct sk_buff *trailer;
+
+	ltq_get_length_params(x->id.spi, &iv_len, &icv_len, &blk_size);
+	trailer_len = icv_len + blk_size ;
+
+	/*if(skb_test == NULL) {
+		printk("<%s>For first packet \n",__FUNCTION__);
+		printk("<%s>IV Len:[%d] ICV Len:[%d] Blk Size:[%d] \n",__FUNCTION__,iv_len,icv_len,blk_size);
+		dump_skb(skb);
+		dump_skb_data(100, skb->data);
+	}*/
+	err = skb_cow_data(skb, trailer_len, &trailer);
+	if (err < 0)
+		goto error;
+
+	/*if(skb_test == NULL) {
+		printk("<%s>For first packet before skb push\n",__FUNCTION__);
+		dump_skb(skb);
+	}
+	skb_push(skb, -skb_network_offset(skb));
+
+	if(skb_test == NULL) {
+		printk("<%s>For first packet Before linearize\n",__FUNCTION__);
+		dump_skb(skb);
+	}*/
+	skb_linearize(skb);	
+	/*if(skb_test == NULL) {
+		skb_test = skb;
+		printk("<%s>For first packet Before submitting %x SPI:%x\n",__FUNCTION__,skb_test, x->id.spi);
+		dump_skb(skb);
+		dump_skb_data(100, skb->data);
+	}*/
+	err = ltq_ipsec_enc(x->id.spi, skb->data, skb_transport_header(skb), esp_output_done_fastpath,
+			skb->len, skb);
+
+	if (err == -EINPROGRESS)
+		goto error;
+
+	if (err == -EBUSY)
+		err = NET_XMIT_DROP;
+
+	if(err > 0) {
+
+		skb->data = skb_transport_header(skb);
+		skb->len = err;
+		skb->tail = skb->data + skb->len;
+		/* if(skb_test == skb) {
+			printk("<%s>For first packet reply from engine %x \n",__FUNCTION__,skb_test);
+			dump_skb(skb);
+			//dump_skb_data(skb_done->len, skb_done->data);
+		} */
+		//skb_put(skb_done, (enc_done->ret_pkt_len - skb_done->len ));
+		skb_push(skb, -skb_network_offset(skb));
+		//skb_done->tail = skb_done->data + skb_done->len;
+		*skb_mac_header(skb) = IPPROTO_ESP;
+		/*if(skb_test == skb) {
+			printk("<%s>For first packet reply from engine after push %x \n",__FUNCTION__,skb_test);
+			dump_skb(skb);
+			dump_skb_data(100, skb->data);
+		}*/
+		return 0;
+
+	}
+
+error:
+	return err;
+}
+
+#else
 static int esp_output(struct xfrm_state *x, struct sk_buff *skb)
 {
 	int err;
@@ -138,7 +287,11 @@ static int esp_output(struct xfrm_state 
 	__be32 *seqhi;
 
 	/* skb is pure payload to encrypt */
-
+	/*if(skb_test == NULL) {
+		printk("<%s>For first packet Enter  SPI:%x\n",__FUNCTION__, x->id.spi);
+		dump_skb(skb);
+		dump_skb_data(200, skb->data);
+	}*/
 	esp = x->data;
 	aead = esp->aead;
 	alen = crypto_aead_authsize(aead);
@@ -203,7 +356,11 @@ static int esp_output(struct xfrm_state 
 	skb_push(skb, -skb_network_offset(skb));
 	esph = ip_esp_hdr(skb);
 	*skb_mac_header(skb) = IPPROTO_ESP;
-
+	/*if(skb_test == NULL) {
+		printk("<%s>For first packet after push  SPI:%x\n",__FUNCTION__, x->id.spi);
+		dump_skb(skb);
+		dump_skb_data(200, skb->data);
+	}*/
 	/* this is non-NULL only with UDP Encapsulation */
 	if (x->encap) {
 		struct xfrm_encap_tmpl *encap = x->encap;
@@ -263,6 +420,13 @@ static int esp_output(struct xfrm_state 
 			      XFRM_SKB_CB(skb)->seq.output.low);
 
 	ESP_SKB_CB(skb)->tmp = tmp;
+
+	/*if(skb_test == NULL) {
+		skb_test = skb;
+		printk("<%s>For first packet Before submitting %x SPI:%x\n",__FUNCTION__,skb_test, x->id.spi);
+		dump_skb(skb);
+		dump_skb_data(skb->len, skb->data);
+	}*/
 	err = crypto_aead_givencrypt(req);
 	if (err == -EINPROGRESS)
 		goto error;
@@ -275,6 +439,7 @@ static int esp_output(struct xfrm_state 
 error:
 	return err;
 }
+#endif
 
 static int esp_input_done2(struct sk_buff *skb, int err)
 {
@@ -345,12 +510,27 @@ static int esp_input_done2(struct sk_buf
 	}
 
 	pskb_trim(skb, skb->len - alen - padlen - 2);
+	/*if(skb_test == skb) {
+		printk("<%s>For first packet reply from engine after pskb_trim %x \n",__FUNCTION__,skb_test);
+		dump_skb(skb);
+		dump_skb_data(skb->len, skb->data);
+	}*/
 	__skb_pull(skb, hlen);
+	/*if(skb_test == skb) {
+		printk("<%s>For first packet reply from engine after skb_pull %x \n",__FUNCTION__,skb_test);
+		dump_skb(skb);
+		dump_skb_data(skb->len, skb->data);
+	}*/
 	if (x->props.mode == XFRM_MODE_TUNNEL)
 		skb_reset_transport_header(skb);
 	else
 		skb_set_transport_header(skb, -ihl);
 
+	/*if(skb_test == skb) {
+		printk("<%s>For first packet reply from engine after set transport header %x \n",__FUNCTION__,skb_test);
+		dump_skb(skb);
+		dump_skb_data(skb->len, skb->data);
+	}*/
 	err = nexthdr[1];
 
 	/* RFC4303: Drop dummy packets without any error */
@@ -368,6 +548,78 @@ static void esp_input_done(struct crypto
 	xfrm_input_resume(skb, esp_input_done2(skb, err));
 }
 
+#ifdef CONFIG_LTQ_PPA_MPE_IP97
+static void esp_input_done_fastpath(struct ltq_ipsec_complete *dec_done)
+{
+	int32_t pkt_len_diff;
+	struct sk_buff *skb_done = (struct sk_buff *)(dec_done->data);
+	//printk("<%s> skb->len:%d dec_done->ret_pkt_len:%d dec_done->err:%d\n",__FUNCTION__,skb_done->len, dec_done->ret_pkt_len, dec_done->err);
+	pkt_len_diff = skb_done->len  - dec_done->ret_pkt_len;
+	skb_done->len = dec_done->ret_pkt_len;
+	skb_done->tail = skb_done->data  + skb_done->len;
+	/*if(skb_test == skb_done) {
+		printk("<%s>For first packet reply from engine %x \n",__FUNCTION__,skb_test);
+		dump_skb(skb_done);
+		dump_skb_data(skb_done->len, skb_done->data);
+	}*/
+	//xfrm_input_resume(skb_done, dec_done->err);
+	xfrm_input_resume(skb_done, 4);
+}
+
+static int esp_input(struct xfrm_state *x, struct sk_buff *skb)
+{
+	int32_t err;
+	struct sk_buff *trailer;
+	
+	/*
+	if(skb_test == NULL) {
+		printk("<%s>For first packet \n",__FUNCTION__);
+		dump_skb(skb);
+		dump_skb_data(skb->len, skb->data);
+	}*/
+
+	err = skb_cow_data(skb, 0, &trailer);
+	if (err < 0)
+		goto error;
+
+	/*if(skb_test == NULL) {
+		printk("<%s>For first packet before skb push\n",__FUNCTION__);
+		dump_skb(skb);
+	}
+	skb_push(skb, -skb_network_offset(skb));
+
+	if(skb_test == NULL) {
+		printk("<%s>For first packet Before linearize\n",__FUNCTION__);
+		dump_skb(skb);
+	}*/
+	skb_linearize(skb);	
+	/*if(skb_test == NULL) {
+		skb_test = skb;
+		printk("<%s>For first packet Before submitting %x SPI:%x\n",__FUNCTION__,skb_test, x->id.spi);
+		dump_skb(skb);
+		dump_skb_data(skb->len, skb->data);
+	}*/
+	err = ltq_ipsec_dec(x->id.spi, skb->data, skb->data, esp_input_done_fastpath,
+			skb->len, skb);
+
+	if (err == -EINPROGRESS)
+		goto error;
+
+	if (err == -EBUSY)
+		err = NET_XMIT_DROP;
+		
+	if(err > 0)
+	{
+		skb->len = err;
+		skb->tail = skb->data  + skb->len;
+	return 0;
+	}
+
+error:
+	return err;
+}
+
+#else
 /*
  * Note: detecting truncated vs. non-truncated authentication data is very
  * expensive, so we only support truncated data, which is the recommended
@@ -456,6 +708,7 @@ static int esp_input(struct xfrm_state *
 out:
 	return err;
 }
+#endif
 
 static u32 esp4_get_mtu(struct xfrm_state *x, int mtu)
 {
diff --git a/net/ipv4/icmp.c b/net/ipv4/icmp.c
--- a/net/ipv4/icmp.c
+++ b/net/ipv4/icmp.c
@@ -848,7 +848,6 @@ int icmp_rcv(struct sk_buff *skb)
 	struct icmphdr *icmph;
 	struct rtable *rt = skb_rtable(skb);
 	struct net *net = dev_net(rt->dst.dev);
-
 	if (!xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
 		struct sec_path *sp = skb_sec_path(skb);
 		int nh;
diff --git a/net/ipv4/ip_forward.c b/net/ipv4/ip_forward.c
--- a/net/ipv4/ip_forward.c
+++ b/net/ipv4/ip_forward.c
@@ -132,9 +132,10 @@ int ip_forward(struct sk_buff *skb)
 	if (skb_warn_if_lro(skb))
 		goto drop;
 
+/*Policy check disabled for IPSec DS MPE accelerated traffic */
+
 	if (!xfrm4_policy_check(NULL, XFRM_POLICY_FWD, skb))
 		goto drop;
-
 	if (IPCB(skb)->opt.router_alert && ip_call_ra_chain(skb))
 		return NET_RX_SUCCESS;
 
diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -201,6 +201,11 @@ static inline int ip_finish_output2(stru
 	}
 
 #if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+    struct iphdr *hdr = ip_hdr(skb);
+    if(hdr->protocol != 50)
+    {
+#endif
         if ( ppa_hook_session_add_fn != NULL )
         {
             struct nf_conn *ct;
@@ -215,6 +220,10 @@ static inline int ip_finish_output2(stru
     
             ppa_hook_session_add_fn(skb, ct, flags);
         }
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+    }
+#endif
+	
 #endif
 
 	rcu_read_lock_bh();
diff --git a/net/ipv4/raw.c b/net/ipv4/raw.c
--- a/net/ipv4/raw.c
+++ b/net/ipv4/raw.c
@@ -313,6 +313,7 @@ int raw_rcv(struct sock *sk, struct sk_b
 		kfree_skb(skb);
 		return NET_RX_DROP;
 	}
+
 	nf_reset(skb);
 
 	skb_push(skb, skb->data - skb_network_header(skb));
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -1732,7 +1732,6 @@ process:
 		NET_INC_STATS_BH(net, LINUX_MIB_TCPMINTTLDROP);
 		goto discard_and_relse;
 	}
-
 	if (!xfrm4_policy_check(sk, XFRM_POLICY_IN, skb))
 		goto discard_and_relse;
 	nf_reset(skb);
diff --git a/net/ipv4/xfrm4_output.c b/net/ipv4/xfrm4_output.c
--- a/net/ipv4/xfrm4_output.c
+++ b/net/ipv4/xfrm4_output.c
@@ -17,6 +17,9 @@
 #include <net/ip.h>
 #include <net/xfrm.h>
 #include <net/icmp.h>
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+#endif
 
 static int xfrm4_tunnel_check_size(struct sk_buff *skb)
 {
@@ -94,6 +97,7 @@ int xfrm4_output(struct sk_buff *skb)
 	struct dst_entry *dst = skb_dst(skb);
 	struct xfrm_state *x = dst->xfrm;
 
+
 	return NF_HOOK_COND(NFPROTO_IPV4, NF_INET_POST_ROUTING, skb,
 			    NULL, dst->dev,
 			    x->outer_mode->afinfo->output_finish,
diff --git a/net/key/af_key.c b/net/key/af_key.c
--- a/net/key/af_key.c
+++ b/net/key/af_key.c
@@ -33,6 +33,10 @@
 
 #include <net/sock.h>
 
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+#endif
+
 #define _X2KEY(x) ((x) == XFRM_INF ? 0 : (x))
 #define _KEY2X(x) ((x) == 0 ? XFRM_INF : (x))
 
@@ -1520,6 +1524,13 @@ static int pfkey_delete(struct sock *sk,
 
 	err = xfrm_state_delete(x);
 
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+        if ( ppa_hook_session_ipsec_del_fn != NULL )
+        {
+            ppa_hook_session_ipsec_del_fn(x);
+        }
+#endif
+
 	if (err < 0)
 		goto out;
 
diff --git a/net/xfrm/xfrm_output.c b/net/xfrm/xfrm_output.c
--- a/net/xfrm/xfrm_output.c
+++ b/net/xfrm/xfrm_output.c
@@ -19,6 +19,10 @@
 #include <net/dst.h>
 #include <net/xfrm.h>
 
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+#endif
+
 static int xfrm_output2(struct sk_buff *skb);
 
 static int xfrm_skb_check_space(struct sk_buff *skb)
@@ -121,8 +125,49 @@ error_nolock:
 int xfrm_output_resume(struct sk_buff *skb, int err)
 {
 	while (likely((err = xfrm_output_one(skb, err)) == 0)) {
+#if !defined(CONFIG_LTQ_PPA_MPE_IP97)
 		nf_reset(skb);
+#endif
 
+
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+		struct net_device *dev_org = skb->dev;
+		skb->dev = skb_dst(skb)->dev;
+
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+        if ( ppa_hook_session_add_fn != NULL )
+        {
+#if defined(CONFIG_LANTIQ_IPQOS_CLASS_ACCELERATION_DISABLE)
+	   /* check for 13th bit in NFMARK set by IPQOS classifier */
+          /* If this bit is set, dont call PPA session add fn*/
+          bool accel_st;
+#ifdef CONFIG_NETWORK_EXTMARK
+          GET_DATA_FROM_MARK_OPT(skb->extmark, ACCELSEL_MASK, ACCELSEL_START_BIT_POS, accel_st);
+#endif
+          if (accel_st == 0) {
+#endif
+
+            struct nf_conn *ct;
+
+            enum ip_conntrack_info ctinfo;
+            uint32_t flags;
+    
+            ct = nf_ct_get(skb, &ctinfo);
+    
+            flags = 0;  //  post routing
+            flags |= CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL ? PPA_F_SESSION_ORG_DIR : PPA_F_SESSION_REPLY_DIR;
+    
+            ppa_hook_session_add_fn(skb, ct, flags);
+#if defined(CONFIG_LANTIQ_IPQOS_CLASS_ACCELERATION_DISABLE)
+	   }
+#endif
+
+        }
+	
+#endif
+		skb->dev = dev_org;
+		nf_reset(skb);
+#endif
 		err = skb_dst(skb)->ops->local_out(skb);
 		if (unlikely(err != 1))
 			goto out;
diff --git a/net/xfrm/xfrm_policy.c b/net/xfrm/xfrm_policy.c
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@ -2426,6 +2426,14 @@ int __xfrm_policy_check(struct sock *sk,
 		 * some barriers, but at the moment barriers
 		 * are implied between each two transformations.
 		 */
+                 /* Mask for ENC and DNC is 0x30000 */
+	        //printk("\nskb->DW1=0x%x\n",skb->DW1);
+
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+		if( (skb->DW1 & 0x30000) ==  0x0)
+		{
+#endif
+	
 		for (i = xfrm_nr-1, k = 0; i >= 0; i--) {
 			k = xfrm_policy_ok(tpp[i], sp, k, family);
 			if (k < 0) {
@@ -2442,6 +2450,9 @@ int __xfrm_policy_check(struct sock *sk,
 			goto reject;
 		}
 
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+		}
+#endif
 		xfrm_pols_put(pols, npols);
 		return 1;
 	}
diff --git a/net/xfrm/xfrm_state.c b/net/xfrm/xfrm_state.c
--- a/net/xfrm/xfrm_state.c
+++ b/net/xfrm/xfrm_state.c
@@ -27,6 +27,9 @@
 #include <linux/kernel.h>
 
 #include "xfrm_hash.h"
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+#endif
 
 /* Each xfrm_state may be linked to two tables:
 
@@ -470,6 +473,13 @@ expired:
 		goto resched;
 	}
 
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+        if ( ppa_hook_session_ipsec_del_fn != NULL )
+        {
+            ppa_hook_session_ipsec_del_fn(x);
+        }
+#endif
+
 	err = __xfrm_state_delete(x);
 	if (!err && x->id.spi)
 		km_state_expired(x, 1, 0);
@@ -621,6 +631,13 @@ restart:
 				spin_unlock_bh(&xfrm_state_lock);
 
 				err = xfrm_state_delete(x);
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+        	if ( ppa_hook_session_ipsec_del_fn != NULL )
+        	{
+            		ppa_hook_session_ipsec_del_fn(x);
+        	}
+#endif
+
 				xfrm_audit_state_delete(x, err ? 0 : 1,
 							audit_info->loginuid,
 							audit_info->sessionid,
@@ -1117,6 +1134,13 @@ out:
 
 	if (to_put)
 		xfrm_state_put(to_put);
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+        sa_direction dir= OUTBOUND;
+        if ( ppa_hook_session_ipsec_add_fn != NULL )
+        {
+            ppa_hook_session_ipsec_add_fn(x,dir);
+        }
+#endif
 
 	return err;
 }
@@ -1298,6 +1322,13 @@ int xfrm_state_update(struct xfrm_state 
 		err = -EEXIST;
 		goto out;
 	}
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+        sa_direction dir= INBOUND;
+        if ( ppa_hook_session_ipsec_add_fn != NULL )
+        {
+            ppa_hook_session_ipsec_add_fn(x,dir);
+        }
+#endif
 
 	if (x1->km.state == XFRM_STATE_ACQ) {
 		__xfrm_state_insert(x);
@@ -1884,7 +1915,15 @@ void xfrm_state_delete_tunnel(struct xfr
 		struct xfrm_state *t = x->tunnel;
 
 		if (atomic_read(&t->tunnel_users) == 2)
+		{
 			xfrm_state_delete(t);
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+        	if ( ppa_hook_session_ipsec_del_fn != NULL )
+        	{
+            		ppa_hook_session_ipsec_del_fn(t);
+        	}
+#endif
+                }
 		atomic_dec(&t->tunnel_users);
 		xfrm_state_put(t);
 		x->tunnel = NULL;
diff --git a/net/xfrm/xfrm_user.c b/net/xfrm/xfrm_user.c
--- a/net/xfrm/xfrm_user.c
+++ b/net/xfrm/xfrm_user.c
@@ -32,6 +32,12 @@
 #include <linux/in6.h>
 #endif
 
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+#endif
+
+
+
 static inline int aead_len(struct xfrm_algo_aead *alg)
 {
 	return sizeof(*alg) + ((alg->alg_key_len + 7) / 8);
@@ -695,6 +701,13 @@ static int xfrm_del_sa(struct sk_buff *s
 
 	err = xfrm_state_delete(x);
 
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+        if ( ppa_hook_session_ipsec_del_fn != NULL )
+        {
+            ppa_hook_session_ipsec_del_fn(x);
+        }
+#endif
+
 	if (err < 0)
 		goto out;
 
